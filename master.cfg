# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# We store the passwords for the buildslaves in a separate file, so we
# can share this one more widely. Thanks to https://svn.torproject.org/svn/projects/buildbot/trunk/master.cfg
PASSWORD_FILE = "passwords.py"

d = {}
execfile(PASSWORD_FILE, d)
PASSWORDS = d['PASSWORDS']
del d

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
slave_name = "localhost_slave"
c['slaves'] = [BuildSlave(slave_name, PASSWORDS[slave_name])]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
PORT_WEB = 8010           # Buildbot webserver port
PORT_MASTER = 9989      # Port where buildbot master listen buildworkers

c['protocols'] = {'pb': {'port': PORT_MASTER}}

####### CHANGESOURCES
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

github_repos_username = 'parmegv'
github_repos_beginning = 'https://github.com/' + github_repos_username + '/'
default_branch = 'develop'
order_repos_index = 3
REPOS=[
    ('leap_pycommon', default_branch, github_repos_beginning + 'leap_pycommon.git', 1, ''),
    ('keymanager', default_branch, github_repos_beginning + 'keymanager.git', 2, 'leap.keymanager'),
    ('soledad', default_branch, github_repos_beginning + 'soledad.git', 3, ''),
    ('leap_mail', default_branch, github_repos_beginning + 'leap_mail.git', 4, 'leap.mail')
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes.filter import ChangeFilter
c['schedulers'] = []

for repo_name, repo_branch, repo_url, _, _ in REPOS:
    c['schedulers'].append(AnyBranchScheduler(
        name=repo_name,
        change_filter = ChangeFilter(repository=repo_url),
        builderNames=['builder_' + repo_name]))

    c['schedulers'].append(ForceScheduler(
        name="force_build_of_" + repo_name,
        builderNames=['builder_' + repo_name]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig
from buildbot import locks
from os import path

def add_repo_to_factory(factory, repo_url, venv_name):
    install_requirements = "if [ -f pkg/requirements-testing.pip ]; then pip install --upgrade -r pkg/requirements-testing.pip; fi"
    setup_py_install = "python setup.py develop"
    sandboxed_setup_install_soledad = ["bash", "-c", "source ../" + venv_name + "/bin/activate" + " && " + setup_py_install]
    sandboxed_setup_install_requirements_soledad = ["bash", "-c", "source ../" + venv_name + "/bin/activate" + " && " + install_requirements]
    sandboxed_setup_install = ["bash", "-c", "source " + venv_name + "/bin/activate" + " && " + setup_py_install]
    sandboxed_setup_install_requirements = ["bash", "-c", "source " + venv_name + "/bin/activate" + " && " + install_requirements]
    
    factory.addStep(ShellCommand(command="rm -rf build", haltOnFailure=True))
    factory.addStep(Git(repourl=repo_url, mode='incremental', method='fresh', haltOnFailure=True))
    if 'soledad.git' in repo_url:
        factory.addStep(ShellCommand(command=sandboxed_setup_install_requirements_soledad, haltOnFailure=True, workdir="build/common"))
        factory.addStep(ShellCommand(command=sandboxed_setup_install_soledad, haltOnFailure=True, workdir="build/common"))
        
        factory.addStep(ShellCommand(command=sandboxed_setup_install_requirements_soledad, haltOnFailure=True, workdir="build/client"))
        factory.addStep(ShellCommand(command=sandboxed_setup_install_soledad, haltOnFailure=True, workdir="build/client"))
        
        factory.addStep(ShellCommand(command=sandboxed_setup_install_requirements_soledad, haltOnFailure=True, workdir="build/server"))
        factory.addStep(ShellCommand(command=sandboxed_setup_install_soledad, haltOnFailure=True, workdir="build/server"))
    else:
        factory.addStep(ShellCommand(command=sandboxed_setup_install_requirements, haltOnFailure=False))
        factory.addStep(ShellCommand(command=sandboxed_setup_install, haltOnFailure=True))

def create_builder(repo_name):
    builder_name = 'builder_' + repo_name
    venv_name = "virtualenv_ci_" + builder_name
    factory = BuildFactory()

    virtualenv_command = ["virtualenv", "--python=python2", "--clear", venv_name]
    update_setuptools_command = "pip install -U pip setuptools"

    repo_index = [repo[order_repos_index] for repo in REPOS if repo[0] is repo_name][0]

    factory.addStep(ShellCommand(command=virtualenv_command, haltOnFailure=True))
    factory.addStep(ShellCommand(command=["bash", "-c", "source " + venv_name + "/bin/activate" + " && " + update_setuptools_command]))
    for repo_name, repo_branch, repo_url, _, namespace, in sorted(REPOS, key = lambda repo: repo[order_repos_index])[0:repo_index]:
        add_repo_to_factory(factory, repo_url, venv_name)
        if namespace is not '':
            factory.addStep(ShellCommand(command=["bash", "-c", "source " + venv_name + "/bin/activate" + " && " + "trial " + namespace]))
    
    return BuilderConfig(name=builder_name, slavenames=[slave_name], factory=factory)

exclusive_slave_lock = locks.SlaveLock("exclusive")
c['builders'] = []

for repo_name, _, _, _, _ in REPOS:
    c['builders'].append(create_builder(repo_name))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

webinterface_username = "web_interface"
c['www'] = dict(port=PORT_WEB,
                plugins=dict(waterfall_view={}, console_view={}),
                change_hook_dialects={'github': { }})

####### PROJECT IDENTITY

import ConfigParser
config = ConfigParser.ConfigParser()
config.read('conf.cfg')

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = config.get('Buildbot', 'title')
c['titleURL'] = "https://github.com/leapcode/bitmask_client"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = config.get('Buildbot', 'url')

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
